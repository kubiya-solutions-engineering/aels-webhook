import os
import sys
import argparse
import requests


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Post failure analysis comment on GitHub PR"
    )
    parser.add_argument("--repo", required=True, help="Repository in format owner/repo")
    parser.add_argument("--number", required=True, type=int, help="PR number")
    parser.add_argument("--workflow-run-id", required=True, help="Workflow run Id")
    parser.add_argument(
        "--analysis-path", required=True, help="Path to file with analysis results"
    )
    parser.add_argument(
        "--failed-logs-path", required=True, help="Path to file with failed logs"
    )

    args = parser.parse_args()

    with open(args.analysis_path) as f:
        analysis_report = f.read()

    with open(args.failed_logs_path) as f:
        failed_logs = f.read()

    if not (github_token := os.getenv("GH_TOKEN")):
        print("‚ùå ERROR: GH_TOKEN is not set")
        sys.exit(1)

    print("=== GitHub PR Comment Tool Started ===")
    print(f"Repo: {args.repo}")
    print(f"PR Number: {args.number}")
    print(f"Analysis report length: {len(analysis_report)} characters")
    print(f"Failed logs length: {len(failed_logs)} characters")
    print(f"Token length: {len(github_token)} characters")
    print(f"Token preview: {github_token}...")

    # Setup headers for GitHub API
    headers = {
        "Authorization": f"Bearer {github_token}",
        "Accept": "application/vnd.github.v3+json",
        "User-Agent": "CI-Pipeline-Failure-Bot/1.0",
    }

    try:
        # Test GitHub API access first
        print("=== Testing GitHub API Access ===")
        user_response = requests.get("https://api.github.com/user", headers=headers)
        user_response.raise_for_status()

        print("‚úÖ GitHub API authentication successful")

        # Check if PR exists
        print("=== Checking if PR exists ===")
        pr_response = requests.get(
            f"https://api.github.com/repos/{args.repo}/pulls/{args.number}",
            headers=headers,
        )
        pr_response.raise_for_status()

        # Process analysis report and logs safely
        analysis_summary = analysis_report[:2000]
        log_summary = failed_logs[:1500]

        workflow_url = (
            f"https://github.com/{args.repo}/actions/runs/{args.workflow_run_id}"
        )

        # Create the comment content with better formatting
        comment_template = """## üö® CI/CD Pipeline Failure Analysis

### üìä Summary
The workflow execution failed during the CI/CD pipeline. Here's the automated analysis:

### üîç Root Cause Analysis
```
{}
```

### üìã Error Details
```
{}
```

### üîó Quick Links
- [View Workflow Run]({})
- [Repository Actions](https://github.com/{}/actions)

---
<sub>ü§ñ This analysis was automatically generated by the CI/CD failure detection system</sub>"""

        comment_body = comment_template.format(
            analysis_summary, log_summary, workflow_url, args.repo
        )

        print("=== Posting PR Comment ===")
        print(f"Comment length: {len(comment_body)} characters")

        # Post the comment to GitHub API
        comment_data = {"body": comment_body}
        comment_response = requests.post(
            f"https://api.github.com/repos/{args.repo}/issues/{args.number}/comments",
            headers=headers,
            json=comment_data,
        )
        comment_response.raise_for_status()
        comment_result = comment_response.json()

        print(f"‚úÖ SUCCESS: Comment posted successfully to PR #{args.number}")
        print(f"Comment ID: {comment_result.get('id', 'Unknown')}")
        print(f"Comment URL: {comment_result.get('html_url', 'Unknown')}")

        # Output the comment URL for workflow to capture
        print(comment_result.get("html_url", ""))

        os.environ["PR_COMMENT"] = comment_result.get("html_url")
        print("Set environment variable `PR_COMMENT`\n")

        print("=== GitHub PR Comment Tool Completed Successfully ===")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå HTTP ERROR: {e}")
        if hasattr(e, "response") and e.response is not None:
            print(f"Response status: {e.response.status_code}")
            print(f"Response body: {e.response.text}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå UNEXPECTED ERROR: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
